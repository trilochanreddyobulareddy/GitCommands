{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 \ul \ulc0 SETUP Commands:  
\f1 \cf2 \expnd0\expndtw0\kerning0
\ulc2 \outl0\strokewidth0 \strokec2 Configuring user information used across all local repositories\
\

\f0\fs36 \cf0 \kerning1\expnd0\expndtw0 \ulnone \outl0\strokewidth0 1.
\f1 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git config --global user.name \'93[firstname lastname]\'94 \'97\'97>  set a name that is identifiable for credit when review version history\
2.git config --global user.email \'93[valid-email]\'94	\cf3 \outl0\strokewidth0 \'97\'97>  set an email address that will be associated with each history marker\cf2 \outl0\strokewidth0 \strokec2 \
3.git config --global color.ui 	\'97\'97>  auto set automatic command line coloring for Git for easy reviewing\

\fs48 \

\b \ul SETUP & INIT: Configuring user information, initializing and cloning repositories\

\b0 \ulnone \

\fs36 4.git init 			\'97\'97> initialize an existing directory as a Git repository\
5.git clone [url]		\'97\'97> retrieve an entire repository from a hosted location via URL\

\fs48 \
\pard\pardeftab720\sl280\partightenfactor0

\b \cf2 \ul \ulc2 STAGE & SNAPSHOT:  Working with snapshots and the Git staging area \

\b0 \ulnone \

\fs36 6.git status		 \'97\'97> show modified files in working directory, staged for your next commit \
7.git add [file] 		\'97\'97> add a file as it looks now to your next commit (stage) \
8. git reset [file]	\'97\'97> unstage a file while retaining the changes in working directory \
9.git diff			\'97\'97>  diff of what is changed but not staged \
10.git diff \'97staged \'97\'97>diff of what is staged but not yet commited \
11.git commit -m \'93[descriptive message]\'94 \'97> commit your staged content as a new commit snapshot
\fs48 \
\

\b \ul BRANCH & MERGE: Isolating work in branches, changing context, and integrating changes \
\

\b0\fs36 \ulnone 12.git branch 				\'97\'97>list your branches. a * will appear next to the currently active branch \
13.git branch [branch-name]  \'97\'97>create a new branch at the current commit \
14.git checkout 			\'97\'97>switch to another branch and check it out into your working directory \
15.git merge [branch] 		\'97\'97>merge the specified branch\'92s history into the current one \
16.git log 				\'97\'97> show all commits in the current branch\'92s history\

\fs48 \
\pard\pardeftab720\sl280\partightenfactor0

\b \cf2 \ul \ulc2 INSPECT & COMPARE: Examining logs, diffs and object information\
\

\b0\fs36 \ulnone 17. git log 				\'97\'97-> show the commit history for the currently active branch \
18.git log branchB..branchA 	\'97\'97>show the commits on branchA that are not on branchB \
20.git log \'97follow [file] 	\'97\'97> show the commits that changed file, even across renames \
21.git diff branchB...branchA \'97\'97>show the diff of what is in branchA that is not in branchB \
22. git show [SHA] 		\'97\'97> show any object in Git in human-readable format\

\fs48 \

\b \ul TRACKING PATH CHANGES: Versioning file removes and path changes \

\b0 \ulnone \

\fs36 23.git rm [file] 					\'97\'97> delete the file from project and stage the removal for commit \
24.git mv [existing-path] [new-path] 	\'97\'97> change an existing file path and stage the move \
25.git log --stat -M 					\'97\'97> show all commit logs with indication of any paths that moved
\fs48 \
\

\b \ul IGNORING PATTERNS: Preventing unintentional staging or commiting of files \

\b0 \ulnone \

\fs36 logs/ *.notes pattern*/ Save a file with desired paterns as .gitignore with either direct string matches or wildcard globs.\
26.git config --global core.excludesfile [file] \'97\'97> system wide ignore patern for all local repositories
\fs48 \
\

\b \ul SHARE & UPDATE: Retrieving updates from another repository and updating local repos \

\b0 \ulnone \

\fs36 27.git remote add [alias] [url] \'97\'97\'97>add a git URL as an alias \
28.git fetch [alias]			\'97\'97\'97> fetch down all the branches from that Git remote \
29.git merge [alias]/[branch] 	\'97\'97\'97>  merge a remote branch into your current branch to bring it up to date \
30.git push [alias] [branch] 	\'97\'97> Transmit local branch commits to the remote repository branch \
31. git pull				\'97\'97\'97> fetch and merge any commits from the tracking remote branch
\fs48 \
\

\b \ul REWRITE HISTORY: Rewriting branches, updating commits and clearing history \

\b0\fs36 \ulnone \
32.git rebase [branch]		\'97\'97> apply any commits of current branch ahead of specified one \
33.git reset --hard [commit] 	\'97\'97>clear staging area, rewrite working tree from specified commit
\fs48 \
\

\b \ul TEMPORARY COMMITS:  Temporarily store modified, tracked files in order to change branches \

\b0 \ulnone \

\fs36 34.git stash \'97\'97> Save modified and staged changes \
35.git stash \'97\'97\'97>list list stack-order of stashed file changes \
36.git stash \'97\'97-> pop write working from top of stash stack \
37.git stash \'97\'97> drop discard the changes from top of stash stack\
}